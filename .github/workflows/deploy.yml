name: Build & Publish to deploy

on:
  push:
    branches: [ master ]

permissions:
  contents: write

concurrency:
  group: deploy-publish
  cancel-in-progress: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # we need full history for branches/worktrees

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install & Build
        run: |
          npm ci
          npm run build
        # If your build outputs somewhere else, note it below (examples):
        # - Vite(Laravel): public/build
        # - React: build/
        # - Vue: dist/

      - name: Prepare deploy branch via worktree; sync master + build
        shell: bash
        run: |
          set -euo pipefail

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Ensure a local 'deploy' branch exists (tracking origin/deploy if present)
          if git ls-remote --exit-code origin deploy > /dev/null 2>&1; then
            git fetch origin deploy:deploy
          else
            git branch deploy || true
          fi

          # Fresh worktree for deploy
          rm -rf ../deploy-wt
          git worktree add ../deploy-wt deploy

          # Copy *entire repo* into deploy worktree, excluding only repo internals
          rsync -a --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            ./ ../deploy-wt/

          # If your build output is gitignored, we still want it included:
          # use `git add -f` to force-add ignored build artifacts.
          cd ../deploy-wt

          # Examples: force include typical build dirs (adjust to your project)
          if [ -d "public/build" ]; then git add -f public/build; fi
          if [ -d "build" ];        then git add -f build;        fi
          if [ -d "dist" ];         then git add -f dist;         fi

          # Add everything else (force to ensure ignored outputs get staged)
          git add -A -f

          if git diff --cached --quiet; then
            echo "No changes to commit on deploy."
          else
            git commit -m "Deploy: sync master + build ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"
            git push -u origin HEAD:deploy
          fi

          # Clean up worktree
          cd -
          git worktree remove ../deploy-wt --force


